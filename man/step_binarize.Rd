% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/step-binarize.r
\name{step_binarize}
\alias{step_binarize}
\title{Create binary variables from categorical and numeric variables}
\usage{
step_binarize(
  recipe,
  ...,
  role = NA,
  trained = FALSE,
  pass = NULL,
  fail = NULL,
  skip = FALSE,
  id = rand_id("binarize")
)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the sequence of
operations for this recipe.}

\item{...}{One or more selector functions to choose which variables are
affected by the step.}

\item{role}{Not used by this step since no new variables are created.}

\item{trained}{A logical value indicating whether the values used for
binarization have been checked.}

\item{pass, fail}{Vectors of values, matched to the variables, to be coded as
\code{1} or \code{0}, respectively.}

\item{skip}{A logical value indicating whether the step should be skipped
when the recipe is baked by \code{bake.recipe()}.}

\item{id}{A character string that is unique to this step, used to identify
it.}
}
\value{
An updated version of \code{recipe} with the new step added to the
sequence of existing steps (if any).
}
\description{
\code{step_binarize()} creates a \emph{specification} of a recipe step that will create
binary variables from categorical or numeric variables based on a provided
set of passing or failing values.
}
\details{
At least one of \code{pass} and \code{fail} must be provided, and if both are
provided then values in neither will be converted to \code{NA}. For easier
compatibility with other steps, binarization produces integer-valued
variables taking the values \code{0} and \code{1} rather than logical variables.
}
\examples{
rec_test <- recipe(mtcars, mpg ~ .) \%>\%
  step_binarize(vs, am, pass = 1) \%>\%
  step_center(all_predictors(), -vs, -am) \%>\%
  step_scale(all_predictors(), -vs, -am) \%>\%
  prep()
bake(rec_test, mtcars)
}
